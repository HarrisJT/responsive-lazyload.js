/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;
/******/
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var _responsiveLazyload = __webpack_require__(1);
	
	// Create a global for access without using webpack.
	window.responsiveLazyload = { lazyLoadImages: _responsiveLazyload.lazyLoadImages };

/***/ },
/* 1 */
/***/ function(module, exports) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.lazyLoadImages = lazyLoadImages;
	/**
	 * Check if an element is visible at all in the viewport.
	 * @param  {Element} el the element to check
	 * @return {Boolean}    `true` if the element is visible at all; `false` if not
	 */
	function isElementVisible(el) {
	  var position = el.getBoundingClientRect();
	  var wHeight = window.innerHeight || document.documentElement.clientHeight;
	
	  return position.top >= 0 && position.top <= wHeight || position.bottom >= 0 && position.bottom <= wHeight;
	}
	
	/**
	 * Prevents a function from firing too often.
	 * @param  {Function} func  the function to throttle
	 * @param  {Number}   limit the amount of milliseconds to wait between calls
	 * @return {Function}       function to check if the function should be called
	 */
	function throttle(func) {
	  var limit = arguments.length <= 1 || arguments[1] === undefined ? 200 : arguments[1];
	
	  var wait = false;
	
	  return function () {
	    if (!wait) {
	      func.call();
	      wait = true;
	      setTimeout(function () {
	        wait = false;
	      }, limit);
	    }
	  };
	}
	
	/**
	 * Check if an image is visible and trigger an event if so.
	 * @param  {Element} image the image to check
	 * @param  {Event}   event an event to dispatch if the image is in the viewport
	 * @return {Boolean}       true if the image is in the viewport; false if not
	 */
	var maybeTriggerImageLoad = function maybeTriggerImageLoad(image, event) {
	  if (!image.dataset.loaded && isElementVisible(image)) {
	    image.dispatchEvent(event);
	
	    return true;
	  }
	
	  return false;
	};
	
	/**
	 * Finds the image to be lazyloaded.
	 * @param  {Element} container `img` element to be lazyloaded or its container
	 * @return {Element}           the `img` element to be lazyloaded
	 */
	var findImageElement = function findImageElement(container) {
	  if (container.tagName.toLowerCase() === 'img') {
	    return container;
	  } else {
	    return container.querySelector('img');
	  }
	};
	
	/**
	 * This almost seems too easy, but we simply swap in the correct srcset.
	 * @param  {Event} event the triggered event
	 * @return {Void}
	 */
	var loadImage = function loadImage(event) {
	  event.target.srcset = event.target.dataset.lazyload;
	
	  // Add a `data-loaded` attribute to prevent duplicate loads.
	  event.target.dataset.loaded = true;
	};
	
	/**
	 * Remove the loading class from the container element.
	 * @param  {Element} image        the image being loaded
	 * @param  {String}  loadingClass the class to remove
	 * @return {Void}
	 */
	var removeLoadingClass = function removeLoadingClass(image, loadingClass) {
	  image.parentNode.classList.remove(loadingClass);
	};
	
	var hasSrcsetSupport = function hasSrcsetSupport() {
	  return 'srcset' in document.createElement('img');
	};
	
	/**
	 * Initializes the lazyloader and adds all relevant handlers.
	 * @param  {String} options.containerClass the container for images to lazyload
	 * @param  {String} options.loadingClass   the loading class for lazyloading
	 * @return {Void}
	 */
	function lazyLoadImages() {
	  var _ref = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];
	
	  var _ref$containerClass = _ref.containerClass;
	  var containerClass = _ref$containerClass === undefined ? "js--lazyload" : _ref$containerClass;
	  var _ref$loadingClass = _ref.loadingClass;
	  var loadingClass = _ref$loadingClass === undefined ? "js--lazyload--loading" : _ref$loadingClass;
	  var _ref$callback = _ref.callback;
	  var callback = _ref$callback === undefined ? function () {} : _ref$callback;
	
	  var toLoad = document.getElementsByClassName(containerClass);
	
	  // Before we do anything, check if the browser supports `srcset`
	  if (!hasSrcsetSupport()) {
	
	    // If not, remove the loading class and bail out.
	    var _iteratorNormalCompletion = true;
	    var _didIteratorError = false;
	    var _iteratorError = undefined;
	
	    try {
	      for (var _iterator = toLoad[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
	        var container = _step.value;
	
	        removeLoadingClass(container, loadingClass);
	      }
	    } catch (err) {
	      _didIteratorError = true;
	      _iteratorError = err;
	    } finally {
	      try {
	        if (!_iteratorNormalCompletion && _iterator.return) {
	          _iterator.return();
	        }
	      } finally {
	        if (_didIteratorError) {
	          throw _iteratorError;
	        }
	      }
	    }
	
	    return false;
	  }
	
	  // If we get here, `srcset` is supported and we can start processing things.
	  var images = [].map.call(toLoad, findImageElement);
	
	  // Create a custom event to trigger the event load.
	  var lazyLoadEvent = new Event('lazyload-init');
	
	  // Attach an onload handler to each image.
	  images.forEach(function (image) {
	
	    /*
	     * Once the image is loaded, we want to remove the loading class so any
	     * loading animations or other effects can be disabled.
	     */
	    image.addEventListener('load', function (event) {
	      removeLoadingClass(event.target, loadingClass);
	      callback(event);
	    });
	
	    /*
	     * Set up a listener for the custom event that triggers the image load
	     * handler (which loads the image).
	     */
	    image.addEventListener('lazyload-init', loadImage);
	
	    /*
	     * Check if the image is already in the viewport. If so, load it.
	     */
	    maybeTriggerImageLoad(image, lazyLoadEvent);
	  });
	
	  /*
	   * Add an event listener when the page is scrolled. To avoid bogging down the
	   * page, we throttle this call to only run every 100ms.
	   */
	  var scrollHandler = throttle(function () {
	    images.forEach(function (image) {
	      maybeTriggerImageLoad(image, lazyLoadEvent);
	    });
	  }, 100);
	  window.addEventListener('scroll', scrollHandler);
	}

/***/ }
/******/ ]);
//# sourceMappingURL=responsive-lazyload.min.js.map